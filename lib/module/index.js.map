{"version":3,"sources":["index.tsx"],"names":["DeviceEventEmitter","NativeEventEmitter","NativeModules","Platform","AliOss","subscription","conf","maxRetryCount","timeoutIntervalForRequest","timeoutIntervalForResource","imageXOssProcess","partSize","mulitpartUploadConfig","appendOptions","appendPosition","contentType","contentMd5","contentEncoding","contentDisposition","AliyunOSS","enableDevMode","initWithPlainTextAccessKey","accessKey","secretKey","endPoint","configuration","initWithImplementedSigner","signature","initWithSecurityToken","securityToken","initWithServerSTS","server","asyncUpload","bucketName","objectKey","filepath","options","asyncResumableUpload","asyncAppendObject","initMultipartUpload","multipartUpload","uploadId","listParts","abortMultipartUpload","asyncDownload","asyncListBuckets","asyncHeadObject","asyncListObjects","asyncCopyObject","srcBucketName","srcObjectKey","desBucketName","destObjectKey","doesObjectExist","asyncDeleteObject","asyncCreateBucket","acl","region","asyncGetBucketACL","asyncDeleteBucket","addEventListener","event","callback","RNAliyunEmitter","OS","addListener","e","removeEventListener","remove"],"mappings":"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","sourcesContent":["import {\n  DeviceEventEmitter,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n  EmitterSubscription,\n} from 'react-native';\n\nconst { AliOss } = NativeModules;\n\nlet subscription: EmitterSubscription;\n\n//default configuration for OSS Client\nconst conf = {\n  maxRetryCount: 3,\n  timeoutIntervalForRequest: 30,\n  timeoutIntervalForResource: 24 * 60 * 60,\n};\n\nconst imageXOssProcess = {\n  'x-oss-process': '',\n};\n\nlet partSize = 128 * 1024;\nconst mulitpartUploadConfig = {\n  partSize: partSize,\n};\n\n//appendObject\nconst appendOptions = {\n  appendPosition: 0,\n  contentType: '',\n  contentMd5: '',\n  contentEncoding: '',\n  contentDisposition: '',\n};\n\nconst AliyunOSS = {\n  //Enable dev mode\n  enableDevMode() {\n    AliOss.enableDevMode();\n  },\n\n  /**\n   * Initialize the OSS Client\n   * Mode: PlainTextAKSK\n   */\n  initWithPlainTextAccessKey(\n    accessKey: string,\n    secretKey: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithPlainTextAccessKey(\n      accessKey,\n      secretKey,\n      endPoint,\n      configuration\n    );\n  },\n\n  /**\n   * Initialize the OSS Client\n   * Mode: ImplementedSigner\n   */\n  initWithImplementedSigner(\n    signature: string,\n    accessKey: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithImplementedSigner(\n      signature,\n      accessKey,\n      endPoint,\n      configuration\n    );\n  },\n\n  /**\n   * Initialize the OSS Client\n   * Mode: SecurityToken (STS)\n   */\n  initWithSecurityToken(\n    securityToken: string,\n    accessKey: string,\n    secretKey: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithSecurityToken(\n      securityToken,\n      accessKey,\n      secretKey,\n      endPoint,\n      configuration\n    );\n  },\n\n  /**\n   * Initialize the OSS Client\n   * Server STS\n   */\n  initWithServerSTS(server: string, endPoint: string, configuration = conf) {\n    AliOss.initWithServerSTS(server, endPoint, configuration);\n  },\n\n  /**\n   * Asynchronously uploading\n   */\n  asyncUpload(\n    bucketName: string,\n    objectKey: string,\n    filepath: string,\n    options: any\n  ) {\n    return AliOss.asyncUpload(bucketName, objectKey, filepath, options);\n  },\n\n  /**\n   * Asynchronously\n   */\n  asyncResumableUpload(\n    bucketName: string,\n    objectKey: string,\n    filepath = '',\n    options = {}\n  ) {\n    return AliOss.asyncResumableUpload(\n      bucketName,\n      objectKey,\n      filepath,\n      options\n    );\n  },\n\n  /**\n   * Asynchronously asyncAppendObject\n   */\n  asyncAppendObject(\n    bucketName: string,\n    objectKey: string,\n    filepath: string,\n    options = appendOptions\n  ) {\n    return AliOss.asyncAppendObject(bucketName, objectKey, filepath, options);\n  },\n\n  /**\n   * Asynchronously\n   */\n  initMultipartUpload(bucketName: string, objectKey: string) {\n    return AliOss.initMultipartUpload(bucketName, objectKey);\n  },\n\n  /**\n   * Asynchronously multipartUpload\n   */\n  multipartUpload(\n    bucketName: string,\n    objectKey: string,\n    uploadId: string,\n    filepath = '',\n    options = mulitpartUploadConfig\n  ) {\n    return AliOss.multipartUpload(\n      bucketName,\n      objectKey,\n      uploadId,\n      filepath,\n      options\n    );\n  },\n\n  /**\n   * Asynchronously listParts\n   */\n  listParts(bucketName: string, objectKey: string, uploadId: string) {\n    return AliOss.listParts(bucketName, objectKey, uploadId);\n  },\n  /**\n   * Asynchronously abortMultipartUpload\n   */\n  abortMultipartUpload(\n    bucketName: string,\n    objectKey: string,\n    uploadId: string\n  ) {\n    return AliOss.abortMultipartUpload(bucketName, objectKey, uploadId);\n  },\n\n  /**\n   * Asynchronously downloading\n   */\n  asyncDownload(\n    bucketName: string,\n    objectKey: string,\n    filepath = '',\n    options = imageXOssProcess\n  ) {\n    return AliOss.asyncDownload(bucketName, objectKey, filepath, options);\n  },\n\n  /*\n    asyncListBuckets\n    */\n\n  asyncListBuckets() {\n    return AliOss.asyncListBuckets();\n  },\n\n  /**\n   * Asynchronously getHeadObject\n   */\n\n  asyncHeadObject(bucketName: string, objectKey: string) {\n    return AliOss.asyncHeadObject(bucketName, objectKey);\n  },\n\n  /**\n   * Asynchronously getAsyncObjects\n   */\n\n  asyncListObjects(bucketName: string, options: string) {\n    return AliOss.asyncListObjects(bucketName, options);\n  },\n\n  /**\n   * Asynchronously asyncCopyObject\n   */\n\n  asyncCopyObject(\n    srcBucketName: string,\n    srcObjectKey: string,\n    desBucketName: string,\n    destObjectKey: string,\n    options: any\n  ) {\n    return AliOss.asyncCopyObject(\n      srcBucketName,\n      srcObjectKey,\n      desBucketName,\n      destObjectKey,\n      options\n    );\n  },\n\n  /**\n   * Asynchronously doesObjectExist\n   */\n\n  doesObjectExist(bucketName: string, objectKey: string) {\n    return AliOss.doesObjectExist(bucketName, objectKey);\n  },\n\n  /**\n   * Asynchronously asyncDeleteObject\n   */\n\n  asyncDeleteObject(bucketName: string, objectKey: string) {\n    return AliOss.asyncDeleteObject(bucketName, objectKey);\n  },\n\n  /**\n   * Asynchronously createBucket\n   */\n  asyncCreateBucket(bucketName: string, acl = 'private', region: string) {\n    return AliOss.asyncCreateBucket(bucketName, acl, region);\n  },\n\n  /**\n   * Asynchronously getBucketACL\n   */\n  asyncGetBucketACL(bucketName: string) {\n    return AliOss.asyncGetBucketACL(bucketName);\n  },\n\n  /**\n   * Asynchronously deleteBucket\n   */\n  asyncDeleteBucket(bucketName: string) {\n    return AliOss.asyncDeleteBucket(bucketName);\n  },\n\n  /**\n   * event listener for native upload/download event\n   * @param event one of 'uploadProgress' or 'downloadProgress'\n   * @param callback a callback function accepts one params: event\n   */\n  addEventListener(event: any, callback: any) {\n    const RNAliyunEmitter =\n      Platform.OS === 'ios'\n        ? new NativeEventEmitter(AliOss)\n        : DeviceEventEmitter;\n    switch (event) {\n      case 'uploadProgress':\n        subscription = RNAliyunEmitter.addListener('uploadProgress', (e) =>\n          callback(e)\n        );\n        break;\n      case 'downloadProgress':\n        subscription = RNAliyunEmitter.addListener('downloadProgress', (e) =>\n          callback(e)\n        );\n        break;\n      default:\n        break;\n    }\n  },\n\n  /**\n   * remove event listener for native upload/download event\n   * @param event one of 'uploadProgress' or 'downloadProgress'\n   */\n  removeEventListener(event: any) {\n    switch (event) {\n      case 'uploadProgress':\n        subscription.remove();\n        break;\n      case 'downloadProgress':\n        subscription.remove();\n        break;\n      default:\n        break;\n    }\n  },\n};\nexport { AliyunOSS };\n"]}